

{
   import React, { useCallback, useEffect, useState } from "react";
import { userData, useSocket } from "../../../context";
import peer from "../../peer.js";
import ReactPlayer from "react-player";
const Video = () => {
  const { socket } = useSocket();
  const { userName } = userData();
  const roomId = localStorage.getItem("roomId");
  // video Chat
  const [myStream, setmyStream] = useState(null);
  const [remoteStreams, setremoteStream] = useState([]);

  const [remoteSocketId, setremoteSocketId] = useState();
  const [isCallOnGoing, setisCallOnGoing] = useState(false);
  const [onCall, setonCall] = useState(false);
  // toggle mic and cam
  const [isMuted, setIsMuted] = useState(false);
  const [isCameraEnabled, setIsCameraEnabled] = useState(false);
  const toggleMute = () => {
    if (myStream) {
      myStream.getAudioTracks().forEach((track) => (track.enabled = isMuted));
      setIsMuted(!isMuted);
    }
  };
  const toggleCamera = () => {
    if (myStream) {
      myStream
        .getVideoTracks()
        .forEach((track) => (track.enabled = isCameraEnabled));
      setIsCameraEnabled(!isCameraEnabled);
    }
  };

  //making call
  const handleCallUser = useCallback(async () => {
    console.log("call Started");
    if (isCallOnGoing) {
      alert("Call is already ongoing. Join instead of starting a new one.");
      sendStreams();
      return;
    }
    setisCallOnGoing(true);
    const stream = await navigator.mediaDevices.getUserMedia({
      audio: true,
      video: true,
    });
    setmyStream(stream);
    const offer = await peer.getOffer();
    socket.emit("user-call", { to: remoteSocketId, offer });
    socket.emit("call-started", { initiatorId: socket.id, roomId });
  }, [isCallOnGoing, remoteSocketId, socket]);
  const handleIncommingCall = useCallback(
    async ({ from, offer }) => {
      console.log("incomming call")
      if (isCallOnGoing) {
        alert("Call already ongoing. Joining the call...");
        sendStreams();
        return;
      }
      setremoteSocketId(from);
      setisCallOnGoing(true);
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: true,
        video: true,
      });
      setmyStream(stream);
      const ans = await peer.getAnswer(offer);
      socket.emit("call:accepted", { to: from, ans });
    },
    [socket]
  );
  //for send streams and join call
  const sendStreams = useCallback(() => {
    if (!myStream) {
      console.error("No local stream available to send.");
      return;
    }
    setonCall(true);
    const existingTracks = peer.peer
      .getSenders()
      .map((sender) => sender.track?.id);

    myStream.getTracks().forEach((track) => {
      if (!existingTracks.includes(track.id)) {
        peer.peer.addTrack(track, myStream);
      }
    });
  }, [myStream]);
  const handleCallAccepted = useCallback(
    async ({ from, ans }) => {
      setremoteSocketId(from)
      peer.setLocalDescription(ans);
      console.log("Call Accepted!");
      sendStreams();
    },
    [sendStreams]
  );

  // negotiation
  const handleNegoNeeded = useCallback(async () => {
    const offer = await peer.getOffer();
    socket.emit("peer:nego:needed", { offer, to: remoteSocketId });
  }, [remoteSocketId, socket]);
  useEffect(() => {
    peer.peer.addEventListener("negotiationneeded", handleNegoNeeded);
    return () => {
      peer.peer.removeEventListener("negotiationneeded", handleNegoNeeded);
    };
  }, [handleNegoNeeded]);
  const handleNegoNeedIncomming = useCallback(
    async ({ from, offer }) => {
      const ans = await peer.getAnswer(offer);
      socket.emit("peer:nego:done", { to: from, ans });
    },
    [socket]
  );
  const handleNegoNeedFinal = useCallback(({ ans }) => {
    peer.setLocalDescription(ans);
  }, []);

  // adding remote streams and removing
  const handleNewRemoteStream = (newStream) => {
    // console.log("adding stream", newStream);
    if (!newStream || !newStream.id) {
      console.error("Invalid newStream received:", newStream);
      return;
    }

    setremoteStream((prevStreams) => {
      // Prevent duplicate streams
      const streamAlreadyExists = prevStreams.some(
        (stream) => stream.id === newStream.id
      );
      if (streamAlreadyExists) {
        // console.log("Stream already exists:", newStream.id);
        return prevStreams;
      }

      return [...prevStreams, newStream];
    });
  };
  const cleanupStream = (stream) => {
    stream.getTracks().forEach((track) => track.stop());
  };
  const handleRemoveRemoteStream = (streamId) => {
    // console.log("removing", streamId);
    setremoteStream((prevStreams) => {
      const streamToRemove = prevStreams.find(
        (stream) => stream.id === streamId
      );
      if (streamToRemove) {
        cleanupStream(streamToRemove);
      }
      return prevStreams.filter((stream) => stream.id !== streamId);
    });
    // console.log("removed stream", streamId);
  };
  useEffect(() => {
    const handleTrack = async (ev) => {
      const remoteStream = ev.streams[0];
      // console.log(remoteStream);
      handleNewRemoteStream(remoteStream);
    };

    // Add event listeners
    if (peer.peer) {
      peer.peer.addEventListener("track", handleTrack);
    }

    return () => {
      // Clean up: Remove the listeners when the component unmounts or re-renders
      if (peer.peer) {
        peer.peer.removeEventListener("track", handleTrack);
      }
    };
  }, [peer.peer, handleNewRemoteStream]);

  //  cancel call && hang_up call
  const cancelCall = async () => {
    try {
      console.log("cancel the call");
      if (myStream) {
        myStream.getTracks().forEach((track) => track.stop());
        // socket.emit("remove-stream", { streamId: myStream?.id, roomId });
      }
      socket.emit("call-ended", {
        roomId,
        streamId: myStream?.id,
        userId: socket.id,
      });
      setisCallOnGoing(false);
      clearMediaStreams();
    } catch (error) {
      console.error("Error cancelling the call:", error);
    }
  };
  const clearMediaStreams = () => {
    // Stop local stream tracks
    if (myStream) {
      myStream.getTracks().forEach((track) => track.stop());
      setmyStream(null);
    }
    setremoteStream([]);
  };

  // socket io
  useEffect(() => {
    if (socket) {
      socket.on("user-joined", ({ socketId, roomid }) => {
        console.log(socketId, "socket is ");
        setremoteSocketId(socketId);
      });
      socket.on("call-started", ({ initiatorId }) => {
        if (initiatorId !== socket.id) {
          // console.log("Call started by another user. Setting up streams...");
          setisCallOnGoing(true);
        }
      });

      // call End
      socket.on("call-ended", ({ streamId }) => {
        handleRemoveRemoteStream(streamId); // Handle stream removal
      });
      socket.on("call:ended:final", ({ roomId }) => {
        console.log("All participants have left. Resetting state.");
        cancelCall();
        clearMediaStreams();
        setisCallOnGoing(false);
        setremoteStream([]);
        setmyStream(null);
      });

      socket.on("incomming:call", handleIncommingCall);
      socket.on("call:accepted", handleCallAccepted);

      socket.on("peer:nego:needed", handleNegoNeedIncomming);
      socket.on("peer:nego:final", handleNegoNeedFinal);

      return () => {
        socket.off("user-joined");
        socket.off("call-ended");
        socket.off("call-started");
        socket.off("call:ended:final");
        socket.off("remove-stream", handleRemoveRemoteStream);
        socket.off("incomming:call", handleIncommingCall);
        socket.off("call:accepted", handleCallAccepted);
        socket.off("peer:nego:needed", handleNegoNeedIncomming);
        socket.off("peer:nego:final", handleNegoNeedFinal);
      };
    }
  }, [
    socket,
    handleIncommingCall,
    handleCallAccepted,
    handleRemoveRemoteStream,
    handleNegoNeedIncomming,
    handleNegoNeedFinal,
    isCallOnGoing,
    remoteSocketId,
    remoteStreams,
  ]);
  return (
    <div className="scroll z-40 w-full  h-[90vh] overflow-y-scroll scroll-smooth bg-[#1e1e2f] flex flex-col justify-between">
      {/* Video Streams */}
      <div className="relative grid">
        {/* Local Video Stream */}
        <div className="  flex items-center justify-center p-4 ">
          <div className="relative   w-[15rem] rounded-[.5rem] overflow-hidden ">
            <h3 className="absolute top-0 left-0  z-30 text-2xl font-semibold text-black mb-1">
              {userName}
            </h3>
            {myStream && onCall ? (
              <ReactPlayer
                playing
                muted
                width="100%"
                height="100%"
                url={myStream}
              />
            ) : (
              <></>
            )}
          </div>
        </div>

        {/* Remote Video Streams */}
        {remoteStreams && onCall ? (
          remoteStreams.map((stream, index) => (
            <div
              key={stream.id}
              className="flex flex-col items-center justify-center p-3  overflow-hidden"
            >
              <h3 className="text-sm font-semibold text-white mb-1"></h3>
              <div className="relative w-[15rem] rounded-[.5rem] overflow-hidden">
                <ReactPlayer playing width="100%" height="100%" url={stream} />
              </div>
            </div>
          ))
        ) : (
          <></>
        )}
      </div>

      {/* Call Control Buttons */}
      <div className=" flex flex-col items-center w-full p-3 bg-[#2c2f3f]/35 sticky bottom-0 left-0">
        <div className="flex justify-center space-x-4 w-full">
          {!isCallOnGoing ? (
            <button
              onClick={handleCallUser}
              className="bg-blue-600 text-white py-3 px-6 rounded-lg hover:bg-blue-700 focus:outline-none transition-transform duration-300 hover:scale-105"
            >
              Start Call
            </button>
          ) : (
            <>
              <button
                onClick={sendStreams}
                className="bg-green-600 font-medium text-white  p-3 rounded-lg hover:bg-green-700 focus:outline-none transition-transform duration-300 hover:scale-105"
              >
                Join Call
              </button>

              {myStream && (
                <div className="flex gap-2 ">
                  <button
                    onClick={toggleMute}
                    className={`${
                      isMuted ? "bg-red-600" : "bg-green-600"
                    } text-white p-2 rounded-lg hover:opacity-90 hover:scale-95 focus:outline-none`}
                  >
                    <img
                      className="w-5 h-5"
                      src="src/assets/mute.png"
                      alt="Mute"
                    />
                  </button>
                  <button
                    onClick={toggleCamera}
                    className={`${
                      isCameraEnabled ? "bg-red-600" : "bg-green-600"
                    } text-white p-2 rounded-lg hover:opacity-90 hover:scale-95 focus:outline-none`}
                  >
                    <img
                      className="w-5 h-5"
                      src="/src/assets/cam-recorder.png"
                      alt="Camera"
                    />
                  </button>
                </div>
              )}
              <button
                onClick={cancelCall}
                className="bg-red-600 font-medium text-white p-2 rounded-lg hover:bg-red-700 focus:outline-none transition-transform duration-300 hover:scale-105"
              >
                Cancel Call
              </button>
            </>
          )}
        </div>
      </div>
    </div>
  );
};
export default Video;}

{
  class PeerService {
  constructor() {
    if (!this.peer) {
      this.peer = new RTCPeerConnection({
        iceServers: [
          {
            urls: [
              "stun:stun.l.google.com:19302",
              "stun:global.stun.twilio.com:3478",
            ],
          },
        ],
      });
    }
  }

  async getAnswer(offer) {
    if (this.peer) {
      await this.peer.setRemoteDescription(offer);
      const ans = await this.peer.createAnswer();
      await this.peer.setLocalDescription(new RTCSessionDescription(ans));
      return ans;
    }
  }

  async setLocalDescription(ans) {
    if (this.peer) {
      await this.peer.setRemoteDescription(new RTCSessionDescription(ans));
    }
  }

  async getOffer() {
    if (this.peer) {
      const offer = await this.peer.createOffer();
      await this.peer.setLocalDescription(new RTCSessionDescription(offer));
      return offer;
    }
  }
  export default new PeerService();}
}



{
      // handle video chat
      socket.on("call-started", ({ initiatorId, roomId }) => {
        console.log(roomId, initiatorId);
        if (!activeParticipants[roomid]) {
          activeParticipants[roomid] = [];
        }

        // Add the user to the room's participant list
        if (!activeParticipants[roomid].includes(socket.id)) {
          activeParticipants[roomid].push({
            socketID: socket.id,
            onCall: true,
          });
        }

        socket.to(roomId).emit("call-started", { initiatorId });
      });

      socket.on("user-call", ({ to, offer }) => {
        io.to(to).emit("incomming:call", { from: socket.id, offer });
      });

      socket.on("call:accepted", ({ to, ans }) => {
        io.to(to).emit("call:accepted", { from: socket.id, ans });
      });

      socket.on("peer:nego:needed", ({ offer, to }) => {
        // console.log("peer:nego:needed", offer);
        io.to(to).emit("peer:nego:needed", { from: socket.id, offer });
      });

      socket.on("peer:nego:done", ({ to, ans }) => {
        // console.log("peer:nego:done", ans);
        io.to(to).emit("peer:nego:final", { from: socket.id, ans });
      });

      socket.on("call-ended", ({ roomId, userId, streamId }) => {
        // console.log(`Call ended by ${userId} in room ${roomId}`);
        // console.log("party c pant s ", activeParticipants);

        if (activeParticipants[roomId]) {
          activeParticipants[roomId] = activeParticipants[roomId].filter(
            (id) => id !== userId
          );
        }
        console.log("party c pant s ", activeParticipants);
        // Notify others that the user left
        io.to(roomId).emit("call-ended", { streamId });

        // If no participants remain in the room
        if (
          activeParticipants[roomId] &&
          activeParticipants[roomId].length === 0
        ) {
          console.log(`No participants left in room ${roomId}. Cleaning up.`);
          delete activeParticipants[roomId];
          io.to(roomId).emit("call:ended:final", { roomId });
        }
        console.log("party c pant s 155", activeParticipants);
      });
}